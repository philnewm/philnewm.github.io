{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"ansible/molecule_getting_started/ansible_molecule_using_vagrant_and_virtualbox/","title":"Getting started with Ansible Molecule","text":"","tags":["ansible","molecule","automation","blog"]},{"location":"ansible/molecule_getting_started/ansible_molecule_using_vagrant_and_virtualbox/#intro","title":"Intro","text":"<p>After reading through a bunch of Ansible molecule setup guides I noticed quite a bunch of them were outdated in at least one critical aspect. Will discuss the details of this in Prepare development environment. @@TODO make inline markdown style links work in obsidian.</p> <p>So this is a guide on setting up Ansible Molecule for testing Ansible roles by running them against virtual machines. These virtual machines will be controlled by Vagrant using VirtualBox as provider. The code in this guide was developed and tested on AlmaLinux9 and Ubuntu22.04 for the software versions mentioned in Requirements</p> <p>@@TODO figure out rules for separator placement</p>","tags":["ansible","molecule","automation","blog"]},{"location":"ansible/molecule_getting_started/ansible_molecule_using_vagrant_and_virtualbox/#requirements","title":"Requirements","text":"","tags":["ansible","molecule","automation","blog"]},{"location":"ansible/molecule_getting_started/ansible_molecule_using_vagrant_and_virtualbox/#system","title":"System","text":"<p>Since we will use VirtualBox virtual Machines in this guide it's required for you system to have virtualization enabled in your Mainboards BIOS or UEFI. Check this article for further details</p> <p>This guide is intended to be followed on a Linux system. This articles assumes you got a basic understanding of Ansible and how to operate within the Linux terminal. To follow this guide on a Windows system you will need to use the Windows Subsystem for Linux (WSL) since Ansible is not supported on Windows. It does however support remote controlling Windows hosts.</p>","tags":["ansible","molecule","automation","blog"]},{"location":"ansible/molecule_getting_started/ansible_molecule_using_vagrant_and_virtualbox/#python","title":"Python","text":"<p>You will need python &gt;= 3.10 to install the latest versions of all required python packages. Additional the python-venv and python-pip package will be required. Here just the example install command for Ubuntu22.04 <code>sudo apt-get install python3.12 python3.12-venv python3-pip</code></p> <p>Creating a python virtual environment for Ansible first is highly recommended.</p> <pre><code>python${{ env.PYTHON_VERSION }} -m venv ~/.venv/ansible_env\nsource ~/.venv/ansible_env/bin/activate\n</code></pre> <p>Next we need a bunch of python packages like Ansible, Molecule and its Vagrant plugin.</p> <p>Create a project directory and <code>cd</code> into it. Create a <code>requirements.txt</code> file containing these lines:</p> <pre><code>ansible==10.6.0\nmolecule==24.9.0\nmolecule-plugins[vagrant]\ndocker==7.1.0\n</code></pre> docker python packages <p>Installing the docker python package is only necessary due to a bug #32540 in molecule plugins. A fix for this one is already merged, see #166 but no new release happened so far.</p> <p>Now you can run upgrade pip (just to be sure) and install the requirements.</p> <pre><code>pip install --upgrade pip\npip install -r requirements.txt\n</code></pre>","tags":["ansible","molecule","automation","blog"]},{"location":"ansible/molecule_getting_started/ansible_molecule_using_vagrant_and_virtualbox/#tools","title":"Tools","text":"<p>As the title suggests you also need Virtualbox and Vagrant installed to follow along.</p> <p>Vagrant is a virtual machine management tool which allows molecule to create, start and remove virtual machines in an automated way. VirtualBox on the other hand is the virtualization provider and handles all the heavy lifting when it comes to virtualizing your hardware. See the following table for download pages and version used for the following examples.</p> Tool Download Page Version used here Virtualbox Installers 7.1.4 Vagrant Install commands 2.4.3 <pre><code>wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg\necho \"deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/hashicorp.list\nsudo apt-get update\nsudo apt-get install vagrant -y\n</code></pre> <p>It seems like the install command on the VirtualBox website for RedHat based system got a typo in it - at least I needed to change it to the one below to make it work.</p> apt-getdnf Install on Debian-based systems<pre><code>sudo sh -c 'echo \"deb [arch=amd64 signed-by=/usr/share/keyrings/oracle-virtualbox-2016.gpg] https://download.virtualbox.org/virtualbox/debian $(lsb_release -sc) contrib\" &gt;&gt; /etc/apt/sources.list'\nwget -O- https://www.virtualbox.org/download/oracle_vbox_2016.asc | sudo gpg --yes --output /usr/share/keyrings/oracle-virtualbox-2016.gpg --dearmor\nsudo apt-get update\nsudo apt-get install virtualbox-7.1 -y\n</code></pre> Install on RedHat-based systems<pre><code>wget -q https://www.virtualbox.org/download/oracle_vbox_2016.asc -O- | rpm --import oracle_vbox_2016.asc\nsudo dnf update\nsudo dnf install virtualbox-7.1 -y\n</code></pre> <p>Verify the successful installation of both tools by checking their version.</p> <pre><code>VBoxManage --version\nvagrant --version\n</code></pre>","tags":["ansible","molecule","automation","blog"]},{"location":"ansible/molecule_getting_started/ansible_molecule_using_vagrant_and_virtualbox/#prepare-development-environment","title":"Prepare development environment","text":"<p>While I was trying to understand molecule I came across many guides mentioning the command <code>molecule role init</code>. This one doesn't exist anymore since version 6.0.0 - it was removed intentional to get rid of the Ansible-Galaxy dependency. By now you simply use the <code>role init</code> command to initialize an Ansible role and initialize a molecule scenario from within the role afterwards.</p> <pre><code>ansible-galaxy role init example\ncd example\nmolecule init scenario\n</code></pre> <p>For now we'll just go with the default scenario to keep it simple. Now you got a \"molecule\" directory inside the role containing a bunch of default .yml files.</p> Role Structure<pre><code>\ud83d\udce6sample_role\n \u2523 \ud83d\udcc2defaults\n \u2503 \u2517 \ud83d\udcdcmain.yml\n \u2523 \ud83d\udcc2files\n \u2523 \ud83d\udcc2handlers\n \u2503 \u2517 \ud83d\udcdcmain.yml\n \u2523 \ud83d\udcc2meta\n \u2503 \u2517 \ud83d\udcdcmain.yml\n \u2523 \ud83d\udcc2molecule\n \u2503 \u2517 \ud83d\udcc2default\n \u2503   \u2523 \ud83d\udcdcconverge.yml\n \u2503   \u2523 \ud83d\udcdccreate.yml\n \u2503   \u2523 \ud83d\udcdcdestroy.yml\n \u2503   \u2517 \ud83d\udcdcmolecule.yml\n \u2523 \ud83d\udcc2tasks\n \u2503 \u2517 \ud83d\udcdcmain.yml\n \u2523 \ud83d\udcc2templates\n \u2523 \ud83d\udcc2tests\n \u2503 \u2523 \ud83d\udcdcinventory\n \u2503 \u2517 \ud83d\udcdctest.yml\n \u2523 \ud83d\udcc2vars\n \u2503 \u2517 \ud83d\udcdcmain.yml\n \u2517 \ud83d\udcdcREADME.md\n</code></pre> <p>For details about how each file and directory inside this role structure is supposed to be used see the Ansible documentation</p>","tags":["ansible","molecule","automation","blog"]},{"location":"ansible/molecule_getting_started/ansible_molecule_using_vagrant_and_virtualbox/#instance-creation","title":"Instance Creation","text":"","tags":["ansible","molecule","automation","blog"]},{"location":"ansible/molecule_getting_started/ansible_molecule_using_vagrant_and_virtualbox/#default-instance","title":"Default Instance","text":"<p>Creating a molecule instance is done by running <code>molecule create</code> if you do that right away from the roles root directory you will most likely encounter the following error:</p> <pre><code>ERROR    Computed fully qualified role name of sample does not follow current galaxy requirements.\nPlease edit meta/main.yml and assure we can correctly determine full role name:\n\ngalaxy_info:\nrole_name: my_name  # if absent directory name hosting role is used instead\nnamespace: my_galaxy_namespace  # if absent, author is used instead\n</code></pre> <p>This happens due to molecule running a role name-check by default. As stated in the documentation you can either disable the check or just add the <code>role_name</code> and <code>namespace</code> to the <code>meta/main.yml</code> file.</p> <p>Now running <code>molecule create</code> should, while throwing a bunch of warnings, already work. Running <code>molecule list</code> should now show this table.</p> Instance Name Driver Name Provisioner Name Scenario Name Created Converged instance default ansible default true false <p>This will create a default instance using the delegated driver, which is just called \"default\". As the title suggests we will use Vagrant as driver with VirtualBox as a provider in this example. So run <code>molecule destroy</code> to remove that default instance again. If you run <code>molecule drivers</code> you should see a list of installed drivers including <code>vagrant</code>. Take a look at the molecule-plugins repository for additional information</p>","tags":["ansible","molecule","automation","blog"]},{"location":"ansible/molecule_getting_started/ansible_molecule_using_vagrant_and_virtualbox/#cleaning-up","title":"Cleaning up","text":"<p>Molecule stores all instance related data in a so called ephermal directory and removes it when running <code>molecule reset</code>. It's placed at <code>~/.cache/molecule/&lt;role-name&gt;/&lt;scenario-name&gt;</code> by default and usually gets displayed during instance creation @@TODO check instance creation output.  Running <code>molecule reset</code> might result in a python-traceback related to docker on RHEL-systems but will still work and remove the directory as expected.</p> Python traceback explanation for <code>molecule reset</code> <p>Indicates docker and or the python module isn't installed on your system, see #166 Happens e.g. on Almalinux 9 due to podman being the default container service instead of docker and molecule doesn't seem to like this.</p>","tags":["ansible","molecule","automation","blog"]},{"location":"ansible/molecule_getting_started/ansible_molecule_using_vagrant_and_virtualbox/#vagrant-instance","title":"Vagrant Instance","text":"<pre><code>---\n\ndriver:\n  name: vagrant\n  provider:\n    name: virtualbox\nplatforms:\n  # Defaults to Alpine Linux in case no box details are provided\n  - name: Alma9\n    box: almalinux/9\n    box_version: \"9.5.20241203\"\n    memory: 2048\n    cpus: 2\n    interfaces:\n      - auto_config: true\n        network_name: private_network\n        type: \"static\"\n        ip: \"192.168.56.10\"\nprovisioner:\n  name: ansible\n  config_options:\n    defaults:\n      stdout_callback: debug\n      callbacks_enabled: ansible.posix.profile_tasks\n    env:\n      ANSIBLE_FORCE_COLOR: \"true\"\nverifier:\n  name: ansible\n  enabled: True\n\n...\n</code></pre> <p>You can find some explanation of all these settings in the Ansible molecule docs</p> VirtualBox Network Setup <p>Assigning a network-interface using a <code>192.168.56.X</code> address is crucial here. VirtualBox sets up two virtual networks  by default.</p> <ul> <li>vboxnet0 - which is Host-only using 192.168.56.1</li> <li>NatNetwork - using 10.0.2.X</li> </ul> <p>NatNetwork will be used by default but requires port forwarding from the host to the VM to make it accessible from e.g. a browser on the host To get around this we just assign a static address from the host-only network.</p> <pre><code>molecule init scenario default --driver-name vagrant --provisioner-name ansible\ncp ~/.venv/ansible_env/lib/python${{ env.PYTHON_VERSION }}/site-packages/molecule_plugins/vagrant/playbooks/create.yml molecule/default/create.yml\ncp ~/.venv/ansible_env/lib/python${{ env.PYTHON_VERSION }}/site-packages/molecule_plugins/vagrant/playbooks/destroy.yml molecule/default/destroy.yml\nmv requirements.yml molecule/default/requirements.yml\nmv molecule.yml molecule/default/molecule.yml\nmv converge.yml molecule/default/converge.yml\nmv verify.yml molecule/default/verify.yml\n</code></pre> <p>@@ TODO research line number referencing in Ansible books Line 1: Initialize a new scenario using explicit parameters to use vagrant Line 2: The default <code>create.yml</code> file will cause connection issues on start-up so we fix this by copying the one from the molecule vagrant plugin itself Line 3: The default <code>destroy.yml</code>file won't destroy the vagrant box itself so we replace it by copying the one from the molecule vagrant plugin itself Line 4: @@TODO try to get rid of this line - requires removing debug formatting from molecule.yml Line 5: Now replace the molecule config file <code>molecule/default/molecule.yml</code> with the provided one which uses AlmaLinux9. - Get other vagrant boxes on vagrant cloud Line 6: Same goes for the <code>converge.yml</code> playbook Line 7: Same goes for the <code>verify.yml</code> playbook</p> <p>Running <code>molecule create</code> and <code>molecule list</code> when it's done should now display a vagrant instance.</p>","tags":["ansible","molecule","automation","blog"]},{"location":"ansible/molecule_getting_started/ansible_molecule_using_vagrant_and_virtualbox/#access-vagrant-instance","title":"Access Vagrant Instance","text":"<p>Accessing an instance is supposed to be done by running <code>molecule login</code>, this is currently not working due to a bug and should be resolved with the next release. In the meantime you can run <code>vagrant global-status</code> to get the vagrant instance IDs and <code>vagrant ssh &lt;id&gt;</code> to log into one of the VMs displayed. Afterwards just type <code>exit</code> to drop out of the instance again.</p>","tags":["ansible","molecule","automation","blog"]},{"location":"ansible/molecule_getting_started/ansible_molecule_using_vagrant_and_virtualbox/#provision-a-service","title":"Provision a service","text":"<p>After setting up this vagrant instance successfully it is now time to make it do something using Ansible as its provisioner. We will use these tasks so set up an Apache web-server. This is just a very basic example for demonstration.</p> <pre><code>---\n\n- name: Gather facts\n  ansible.builtin.gather_facts:\n\n- name: Install Apache web server\n  become: true\n  ansible.builtin.package:\n    name: httpd\n    state: present\n\n- name: Ensure Apache is started and enabled on boot\n  become: true\n  ansible.builtin.service:\n    name: \"httpd\"\n    state: \"started\"\n    enabled: true\n\n- name: Create default index.html\n  become: true\n  ansible.builtin.copy:\n    content: |\n      &lt;html&gt;\n      &lt;body&gt;\n        &lt;h1&gt;Welcome to Apache on AlmaLinux!&lt;/h1&gt;\n      &lt;/body&gt;\n      &lt;/html&gt;\n    dest: /var/www/html/index.html\n    owner: root\n    group: root\n    mode: '0644'\n  register: default_page\n\n- name: Restart Apache service\n  become: true\n  when: default_page.changed\n  ansible.builtin.service:\n    name: httpd\n    state: restarted\n\n- name: Display VM IP address\n  ansible.builtin.debug:\n    var: ansible_all_ipv4_addresses\n\n...\n</code></pre> <p>Now replace the content of <code>tasks/main.yml</code> with these yaml tasks.</p> <p>Next run <code>molecule converge</code> to run these tasks against the VirtualBox VM. After this ran successfully you should be able to just copy the IP address displayed by the debug task e.g. <code>192.168.56.10</code> to your browser and see the default Apache web-server page right away.</p> <p>Even tho this is nice, testing the functionality of this web-server manually isn't quite a scalable approach. It's time to set up automated testing for this role.</p>","tags":["ansible","molecule","automation","blog"]},{"location":"ansible/molecule_getting_started/ansible_molecule_using_vagrant_and_virtualbox/#test-vagrant-instance","title":"Test Vagrant Instance","text":"<p>We will use Ansible for testing as well to stay with the default and to keep it simple. Another popular option for molecule testing is testinfra Take a look now at these test tasks which should be self-explanatory due to their names.</p> <pre><code>---\n\n- name: Gather package facts\n  ansible.builtin.package_facts:\n\n- name: Gather service facts\n  ansible.builtin.service_facts:\n\n- name: Test Apache package is installed\n  ansible.builtin.assert:\n    that:\n      - \"'httpd' in ansible_facts.packages\"\n    fail_msg: \"Apache package 'httpd' is not installed\"\n    quiet: true\n\n- name: Test Apache service is running\n  ansible.builtin.assert:\n    that:\n      - ansible_facts.services['httpd.service'].state == 'running'\n    fail_msg: \"Apache service is not running\"\n    quiet: true\n\n- name: Query Apache default web page\n  ansible.builtin.uri:\n    url: \"http://{{ ansible_all_ipv4_addresses[0] }}\"\n  register: web_check\n\n- name: Test Apache is reachable\n  ansible.builtin.assert:\n    that:\n      - web_check.status == 200\n    fail_msg: \"Web server is not reachable or did not return status code 200\"\n    success_msg: \"Web server is reachable and returned status code 200\"\n\n...\n</code></pre> <p>Place these tasks into a file called <code>tests.yml</code> in the tasks directory to make them easily accessible. Now you should be able to run <code>molecule verify</code> to have these tests run against the VM.</p>","tags":["ansible","molecule","automation","blog"]},{"location":"ansible/molecule_getting_started/ansible_molecule_using_vagrant_and_virtualbox/#vagrant","title":"Vagrant","text":"<p>Explain what gets saved where and how does the ephemeral directory work</p>","tags":["ansible","molecule","automation","blog"]},{"location":"ansible/molecule_getting_started/ansible_molecule_using_vagrant_and_virtualbox/#wrap-up","title":"Wrap-Up","text":"","tags":["ansible","molecule","automation","blog"]},{"location":"ansible/some_actions/ci_in_github_actions/","title":"Utilize Github actions to run fully automated CI","text":"<p>The molecule test suite works just fine in a terminal session as well so lets use this perk to enable automated CI through Github actions workflows.</p>"},{"location":"ansible/some_actions/ci_in_github_actions/#main-ci-workflow","title":"Main CI-Workflow","text":""},{"location":"ansible/some_actions/ci_in_github_actions/#centralized-control","title":"Centralized Control","text":""},{"location":"ansible/some_actions/ci_in_github_actions/#automated-pushing-to-ansible-galaxy","title":"Automated pushing to Ansible-Galaxy","text":""}]}